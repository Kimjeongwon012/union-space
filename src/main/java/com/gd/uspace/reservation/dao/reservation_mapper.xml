<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.gd.uspace.reservation.dao.ReservationDAO">

<!-- 예약 내역 조회 페이지 쿼리문 시작 -->

<!-- 모임 예약 내역 불러오기 쿼리문 -->
<select id="GetGoupList" parameterType="map" resultType="com.gd.uspace.group.dto.GroupDTO">
    SELECT ug.group_no 
      ,ug.space_no
      ,ug.group_name 
      ,CONCAT(group_starttime, ' ~ ', group_endtime) AS group_time
      ,CONCAT(group_people, ' / ', group_highpeople) AS par_people
      ,ug.group_state
      ,CASE WHEN EXISTS (
          SELECT ad.user_id
          FROM attenDance ad 
          WHERE ad.user_id = #{user_id} AND ad.group_no = ug.group_no
         ) THEN '참석'
         ELSE '미참석'
         END AS attenDance_status
      ,(SELECT count(*) FROM spaceReview sr where sr.space_no = ug.space_no and sr.user_id = #{user_id}) AS isReviewed
      ,group_starttime
	  ,group_endtime
   	FROM us_group ug 
   	WHERE ug.group_no IN (SELECT gm.group_no FROM groupMember gm WHERE gm.user_id = #{user_id})
   	<if test="sort == 'new'">
        ORDER BY ug.group_confirm desc
    </if>
   	<if test="sort == 'old'">
        ORDER BY ug.group_confirm asc
    </if>    
    <if test="page != null">
        LIMIT #{page}, 3
    </if>
</select>

<!-- 장소 예약 내역 불러오기 쿼리문 -->
<select id="GetList" parameterType="map" resultType="com.gd.uspace.group.dto.GroupDTO">
	SELECT 
		group_no, space_no, group_name, 
		CONCAT(group_starttime ,' ~ ', group_endtime) AS group_time,
		(SELECT space_name FROM space WHERE space_no = g.space_no) AS space_name, 
		group_people, 
		group_state,
		(SELECT count(*) FROM spaceReview sr where sr.space_no = g.space_no and sr.user_id = #{user_id}) AS isReviewed,
		group_starttime,
		group_endtime
	FROM us_group g
	WHERE group_state IN (5, 6, 7)
	AND g.user_id = #{user_id}
   	<if test="sort == 'new'">
        ORDER BY g.group_confirm desc
    </if>
   	<if test="sort == 'old'">
        ORDER BY g.group_confirm asc
    </if>    	
	<if test="page != null">
        LIMIT #{page},3
    </if>
</select>

<!-- 모임 예약 페이징 처리된 페이지 개수 -->
<select id="GroupAllCount" resultType="int">
	SELECT 
		CEIL(COUNT(ug.group_no)/3)
	FROM us_group ug
	WHERE ug.group_no IN (SELECT gm.group_no FROM groupMember gm WHERE gm.user_id = #{param1})
</select>

<!-- 장소 예약 페이징 처리된 페이지 개수 -->
<select id="ResAllCount" resultType="int">
	SELECT 
		ceil(COUNT(group_no)/3)
	FROM us_group  
	WHERE group_state IN (5, 6, 7) AND user_id = #{param1}
</select>

<!-- 리뷰작성 인서트 쿼리문 -->
<insert id="writeReview" parameterType="map">
	INSERT INTO spaceReview(space_no, user_id, review_score, review_content)
		VALUES(#{space_no}, #{user_id}, #{review_score}, #{review_content})
</insert>

<!-- 리뷰작성테이블에 인서트하기 위한 장소번호 불러오기 -->
<select id="selectSpaceNo" parameterType="map" resultType="Integer">
   SELECT 
      space_no
   FROM us_group ug
   WHERE ug.group_no = #{group_no}
</select>

<!-- 평가할 인원들의 목록(아이디, 평가 상태)을 반환 --> 
<select id="getEvaluateList" parameterType="map" resultType="com.gd.uspace.reservation.dto.EvaluateListDTO">
	SELECT 
	    gm2.user_id,
	    CASE 
	        WHEN ur.user_evid IS NOT NULL THEN '평가완료'
	        WHEN ad.user_id IS NOT NULL THEN '참석'
	        ELSE '미참석'
	    END AS isAttendance
	FROM 
	    groupMember gm2
	LEFT JOIN 
	    attenDance ad ON gm2.user_id = ad.user_id AND gm2.group_no = ad.group_no
	LEFT JOIN 
	    userReview ur ON gm2.user_id = ur.user_evid AND gm2.group_no = ur.group_no
	WHERE 
	    gm2.group_no = #{param1}
	    AND gm2.user_id != #{param2}
</select>

<!-- 평가 항목 목록을 불러온다 -->
<select id="getEvaluateItemList" resultType="com.gd.uspace.reservation.dto.EvaluateItemDTO">
	SELECT 
		user_review_no as item_no 
		,user_review_item as item_content
		,user_review_item_score as item_score
	FROM userReviewItem uri;
</select>
<!-- 너무 길어서 DTO 로 받을때 컬럼명 수정했습니다 확인 부탁드립니다 (정원) -->

<!-- 평가자, 평가 대상자, 평가 총합 점수 userReview 에 기록 -->
<insert id="addEvaluate" parameterType="com.gd.uspace.reservation.dto.EvaluateDTO"
		useGeneratedKeys="true"
		keyProperty="attendance_no"
		keyColumn="attendance_no">
	insert into userReview (group_no, user_id, user_evid, user_review_total_manner_score)
		values (#{group_no}, #{user_id}, #{user_evid}, #{user_review_total_manner_score})	
</insert>

<!-- 평가 번호, 평가 항목 번호 기록 userReviewDetail 에 기록 FK 용 -->
<insert id="addEvaluateDetail">
	insert into userReviewDetail (attendance_no, user_review_no)
		values (#{param1}, #{param2})
</insert>

<!-- 평가 받은 사용자의 매너점수에 반영한다 -->
<update id="updateMannerScore">
	update user set user_mannerpoint = user_mannerpoint + #{param2} where user_id = #{param1}
</update>
<!-- 예약 내역 조회 페이지 쿼리문 끝 -->
</mapper>